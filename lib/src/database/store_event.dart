// coverage:ignore-file
import 'package:freezed_annotation/freezed_annotation.dart';

import '../../firebase_database_rest.dart';

part 'store_event.freezed.dart';

/// An interface for patchsets that can be applied to an instance of [T]
///
/// Patchsets are generated by the library if the server sents patch events.
/// They contain the patch information and can be applied to an instance of [T]
/// to copy the instance and return a modified version with the patch applied.
@immutable
abstract class PatchSet<T> {
  const PatchSet._();

  /// Applies the patch to the given [value] and returns the patched copy of it.
  T apply(T value);
}

/// An event produced by streams of [FirebaseStore] to watch changes on the
/// store.
@freezed
class StoreEvent<T> with _$StoreEvent<T> {
  /// Indicates a full store state, with all [data] as currently stored on the
  /// server.
  const factory StoreEvent.reset(
    /// The complete store state, with all current keys and values.
    Map<String, T> data,
  ) = _StoreReset<T>;

  /// Indicates the entry under [key] has been updated to a new [value].
  const factory StoreEvent.put(
    /// The key of the data that has been updated.
    String key,

    /// The updated data.
    T value,
  ) = _StorePut<T>;

  /// Indicates the array under [key] has been updated at [index] to a new [value].
  const factory StoreEvent.arrayPut(
    /// The key of the array that has been updated.
    String key,

    /// The index of the array that has been updated.
    int index,

    /// The updated data.
    T value,
  ) = _StoreArrayPut<T>;

  /// Indicates the entry under [key] has been deleted.
  const factory StoreEvent.delete(
    /// The key of the data that has been deleted.
    String key,
  ) = _StoreDelete<T>;

  /// Indicates the entry under [key] has been patched with [patchSet].
  const factory StoreEvent.patch(
    /// The key of the data that has been patched.
    String key,

    /// The patchSet set that can be applied to the current value.
    PatchSet<T> patchSet,
  ) = _StorePatch<T>;

  /// Indicates that data was modified at an unsupported [path].
  ///
  /// This event appears whenever data modified is not a direct child of the
  /// store, as the library does not support deep events. It is an event instead
  /// of an error as it can happen quite often depening on how you use the
  /// database. Typically, this event can simply be ignored or logged.
  const factory StoreEvent.invalidPath(
    /// The invalid subpath that was modified on the server.
    String path,
  ) = _StoreInvalidPath<T>;
}

/// An event produced by streams of [FirebaseStore] to watch changes on the
/// store keys.
@freezed
class KeyEvent with _$KeyEvent {
  /// Indicates a full store state, with all [keys] as currently stored on the
  /// server.
  const factory KeyEvent.reset(
    /// A list with all keys that have data.
    List<String> keys,
  ) = _KeyReset;

  /// Indicates that the value of [key] has been updated or patched on the
  /// server.
  const factory KeyEvent.update(
    /// The key of the entry that has been updated.
    String key,
  ) = _KeyUpdate;

  /// Indicates that the value of [key] has been deleted on the server.
  const factory KeyEvent.delete(
    /// The key of the entry that has been deleted.
    String key,
  ) = _KeyDelete;

  /// Indicates that data was modified at an unsupported [path].
  ///
  /// This event appears whenever data modified is not a direct child of the
  /// store, as the library does not support deep events. It is an event instead
  /// of an error as it can happen quite often depening on how you use the
  /// database. Typically, this event can simply be ignored or logged.
  const factory KeyEvent.invalidPath(
    /// The invalid subpath that was modified on the server.
    String path,
  ) = _KeyInvalidPath;
}

/// An event produced by streams of [FirebaseStore] to watch changes on the
/// specific store entry.
@freezed
class ValueEvent<T> with _$ValueEvent<T> {
  /// Indicates that the entry has been updated on the server to [data].
  const factory ValueEvent.update(
    /// The current value of the entry.
    T data,
  ) = _ValueUpdate<T>;

  /// Indicates that the value has been patched on the server with [patchSet].
  const factory ValueEvent.patch(
    /// The patchSet set that can be applied to the current value.
    PatchSet<T> patchSet,
  ) = _ValuePatch<T>;

  /// Indicates that the value has been deleted on the server.
  const factory ValueEvent.delete() = _ValueDelete<T>;

  /// Indicates that data was modified at an unsupported [path].
  ///
  /// This event appears whenever data modified is not a direct child of the
  /// store, as the library does not support deep events. It is an event instead
  /// of an error as it can happen quite often depening on how you use the
  /// database. Typically, this event can simply be ignored or logged.
  const factory ValueEvent.invalidPath(
    /// The invalid subpath that was modified on the server.
    String path,
  ) = _ValueInvalidPath<T>;
}
